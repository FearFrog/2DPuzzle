@startuml

namespace Enums{
    enum SceneState{
        +Title
        +Stage_One
        +Pause
        +Option
        +Result
    }

    enum AudioState{
        +Play   
        +Fade
        +Stop
    }
}

class GameManager{

    +AudioManager
    +SceneManager
    +EffectManager
    +BoardManager


    +void Start()
    +void Update() 
    +void GameOver()
    +void AddScore()
}

class AudioManager{
    -float m_BGM_Volume
    -float m_SE_Volume

    +void PlayBGM(string playBGM)
    +void PlaySE(string playSE)
    +void SetVolume(float setVolume)
    +void FadeVolume(string nextSound)
}

class SceneManager{
    -SceneState
    +SceneState{get; private set;}
    +void ChangeScene(SceneState state)
}

class EffectManager{
    -List<GameObject>
    
    +void PlayEffect(string playEffect)
}

class TimeManager{
    +void StartTime()
    +void StopTime()
    +async Task WaitFotTime(float waitTime)
    -IEnumerator WaitTimeCoroutine(float waitTime) 
}

class BoardManager{
    -CreateBoard(float xOffset,float yOffset)
    -FallTiles() 
    +FindNullTiles()
}

class Pieces{
    -Select()
    -Deselect()
    -FindMatch()
    -ClearMatch()
    +OnMouseDown()
    +SwapSprite()
}

interface IUpdate{
    +void UpdateByFrame()
}

class Effect{
    -float lifeTime

    -void Destroy()
}

class Constants{
    +const string BGM名
    +const string SE名
    +const string エフェクト名
}

GameManager <--> AudioManager
GameManager --> SceneManager
GameManager --> EffectManager
GameManager --> BoardManager
GameManager --> TimeManager

BoardManager-->Pieces

SceneManager <-u-> Enums.SceneState
AudioManager <-u-> Enums.AudioState

AudioManager -u-> Constants
EffectManager -u-> Constants
EffectManager --> Effect

AudioManager  --|> IUpdate
SceneManager  --|> IUpdate
BoardManager  --|> IUpdate
EffectManager --|> IUpdate
TimeManager   --|>  IUpdate

@enduml